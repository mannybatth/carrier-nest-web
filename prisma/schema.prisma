generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    ext_expires_in     Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String           @id @default(cuid())
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    name             String?
    email            String?          @unique
    emailVerified    DateTime?
    image            String?
    defaultCarrierId String?          @map("default_carrier_id")
    defaultCarrier   Carrier?         @relation("defaultCarrier", fields: [defaultCarrierId], references: [id])
    isSiteAdmin      Boolean          @default(false)
    accounts         Account[]
    invoices         Invoice[]
    InvoicePayment   InvoicePayment[]
    loads            Load[]
    loadDocuments    LoadDocument[]
    stops            LoadStop[]
    sessions         Session[]
    carriers         Carrier[]

    @@index([name, email, defaultCarrierId])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Carrier {
    id                  String     @id @default(cuid())
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    email               String     @unique
    name                String
    dotNum              String?
    mcNum               String?
    street              String
    city                String
    state               String
    zip                 String
    country             String
    phone               String?
    customers           Customer[]
    drivers             Driver[]
    invoices            Invoice[]
    loads               Load[]
    users               User[]
    defaultCarrierUsers User[]     @relation("defaultCarrier")

    @@index([name, email])
}

model Load {
    id            String         @id @default(cuid())
    userId        String
    customerId    String?
    carrierId     String
    driverId      String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    refNum        String
    shipperId     String
    receiverId    String
    rate          Decimal
    distance      Int
    routeEncoded  String?
    status        LoadStatus     @default(CREATED)
    invoice       Invoice?
    carrier       Carrier        @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    customer      Customer?      @relation(fields: [customerId], references: [id])
    driver        Driver?        @relation(fields: [driverId], references: [id])
    receiver      LoadStop       @relation("receiver", fields: [receiverId], references: [id])
    shipper       LoadStop       @relation("shipper", fields: [shipperId], references: [id])
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    loadDocuments LoadDocument[] @relation("load")
    podDocuments  LoadDocument[] @relation("loadForPodDoc")
    stops         LoadStop[]
    routeId       Int?

    @@index([refNum, carrierId, userId, customerId])
}

model LoadStop {
    id              String       @id @default(cuid())
    createdAt       DateTime     @default(now())
    userId          String
    type            LoadStopType
    name            String
    street          String
    city            String
    state           String
    zip             String
    country         String
    date            DateTime
    time            String
    loadIdAsStop    String?
    stopIndex       Int          @default(0)
    longitude       Float?
    latitude        Float?
    loadsAsReceiver Load[]       @relation("receiver")
    loadsAsShipper  Load[]       @relation("shipper")
    loadAsStop      Load?        @relation(fields: [loadIdAsStop], references: [id])
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    contactEmail       String?
    billingEmail       String?
    paymentStatusEmail String?
    street             String?
    city               String?
    state              String?
    zip                String?
    country            String?
    carrierId          String
    carrier            Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads              Load[]

    @@index([name, carrierId])
}

model Driver {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    email     String?
    phone     String?
    carrierId String
    carrier   Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads     Load[]

    @@index([name, carrierId])
}

model Invoice {
    id              String           @id @default(cuid())
    userId          String
    carrierId       String
    loadId          String           @unique
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    invoiceNum      Int
    status          InvoiceStatus
    totalAmount     Decimal
    remainingAmount Decimal
    invoicedAt      DateTime
    dueDate         DateTime
    dueNetDays      Int              @default(0)
    paidAmount      Decimal?         @default(0)
    lastPaymentAt   DateTime?
    carrier         Carrier          @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    load            Load             @relation(fields: [loadId], references: [id], onDelete: Cascade)
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    extraItems      InvoiceItem[]
    payments        InvoicePayment[]

    @@unique([carrierId, invoiceNum])
    @@index([userId, invoiceNum])
}

model InvoiceItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    invoiceId String
    title     String
    amount    Decimal
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoicePayment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    userId    String
    invoiceId String
    amount    Decimal
    paidAt    DateTime
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadDocument {
    id              String   @id @default(cuid())
    userId          String
    loadId          String
    loadIdForPodDoc String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    fileKey         String
    fileUrl         String
    fileName        String
    fileType        String
    fileSize        Int
    load            Load?    @relation("load", fields: [loadId], references: [id], onDelete: Cascade)
    loadForPodDoc   Load?    @relation("loadForPodDoc", fields: [loadIdForPodDoc], references: [id], onDelete: Cascade)
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LoadStopType {
    SHIPPER
    RECEIVER
    STOP
}

enum LoadStatus {
    CREATED
    IN_PROGRESS
    DELIVERED
    POD_READY
}

enum InvoiceStatus {
    NOT_PAID
    PARTIALLY_PAID
    PAID
}
