generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?
    ext_expires_in     Int?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String           @id @default(cuid())
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    name             String?
    email            String?          @unique
    emailVerified    DateTime?
    image            String?
    isSiteAdmin      Boolean          @default(false)
    defaultCarrierId String?          @map("default_carrier_id")
    accounts         Account[]
    invoices         Invoice[]
    InvoicePayment   InvoicePayment[]
    loads            Load[]
    loadActivity     LoadActivity[]   @relation("actorUser")
    loadDocuments    LoadDocument[]
    stops            LoadStop[]
    sessions         Session[]
    defaultCarrier   Carrier?         @relation("defaultCarrier", fields: [defaultCarrierId], references: [id])
    carriers         Carrier[]        @relation("CarrierToUser")

    @@index([name, email, defaultCarrierId])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Carrier {
    id                  String     @id @default(cuid())
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    email               String     @unique
    name                String
    dotNum              String?
    mcNum               String?
    street              String
    city                String
    state               String
    zip                 String
    country             String
    phone               String?
    carrierCode         String     @unique
    customers           Customer[]
    drivers             Driver[]
    invoices            Invoice[]
    loads               Load[]
    defaultCarrierUsers User[]     @relation("defaultCarrier")
    users               User[]     @relation("CarrierToUser")

    @@index([name, email, carrierCode])
}

model Load {
    id              String         @id @default(cuid())
    userId          String
    customerId      String?
    carrierId       String
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    refNum          String
    shipperId       String
    receiverId      String
    rate            Decimal
    routeEncoded    String?
    status          LoadStatus     @default(CREATED)
    routeDistance   Decimal?
    routeDuration   Decimal?
    invoice         Invoice?
    carrier         Carrier        @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    customer        Customer?      @relation(fields: [customerId], references: [id])
    receiver        LoadStop       @relation("receiver", fields: [receiverId], references: [id])
    shipper         LoadStop       @relation("shipper", fields: [shipperId], references: [id])
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    activity        LoadActivity[]
    podDocuments    LoadDocument[] @relation("loadForPodDoc")
    rateconDocument LoadDocument?  @relation("loadForRatecon")
    loadDocuments   LoadDocument[] @relation("load")
    stops           LoadStop[]
    additionalStops LoadStop[]     @relation("loadAdditionalLegStops")
    drivers         Driver[]       @relation("driverLoads")
    route           Route?

    @@index([refNum, carrierId, userId, customerId])
}

model LoadStop {
    id               String       @id @default(cuid())
    userId           String
    type             LoadStopType
    name             String
    street           String
    city             String
    state            String
    zip              String
    country          String
    date             DateTime
    time             String
    loadIdAsStop     String?
    loadIdAsAddStop  String?
    stopIndex        Int          @default(0)
    createdAt        DateTime     @default(now())
    latitude         Float?
    longitude        Float?
    pickUpNumbers    String?
    poNumbers        String?
    referenceNumbers String?
    loadsAsReceiver  Load[]       @relation("receiver")
    loadsAsShipper   Load[]       @relation("shipper")
    loadAsStop       Load?        @relation(fields: [loadIdAsStop], references: [id])
    loadAsAdditional Load?        @relation("loadAdditionalLegStops", fields: [loadIdAsAddStop], references: [id])
    user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    routeLegs        RouteLeg[]
}

model Route {
    id        String     @id @default(cuid())
    loadId    String     @unique
    routeLegs RouteLeg[] // Define the one-to-many relationship with RouteLeg
    load      Load       @relation(fields: [loadId], references: [id], onDelete: Cascade)
}

model RouteLeg {
    id                 String             @id @default(cuid())
    routeId            String
    scheduledDate      DateTime?
    scheduledTime      String?
    startLatitude      Float?
    startLongitude     Float?
    startedAt          DateTime?
    endLatitude        Float?
    endLongitude       Float?
    endedAt            DateTime?
    createdAt          DateTime           @default(now())
    driverInstructions String?
    route              Route              @relation(fields: [routeId], references: [id], onDelete: Cascade) // Define the many-to-one relationship with Route
    driverAssignments  DriverAssignment[]
    locations          LoadStop[]
}

model DriverAssignment {
    id         String   @id @default(cuid())
    routeLegId String
    driverId   String
    assignedAt DateTime @default(now())
    routeLeg   RouteLeg @relation(fields: [routeLegId], references: [id], onDelete: Cascade)
    driver     Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)

    @@unique([driverId, routeLegId])
}

model Customer {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    contactEmail       String?
    billingEmail       String?
    paymentStatusEmail String?
    street             String?
    city               String?
    state              String?
    zip                String?
    country            String?
    carrierId          String
    carrier            Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads              Load[]

    @@index([name, carrierId])
}

model Driver {
    id                String             @id @default(cuid())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    name              String
    email             String?
    phone             String
    carrierId         String
    smsCode           String?
    smsCodeExpiry     DateTime?
    carrier           Carrier            @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    actionActivity    LoadActivity[]     @relation("actionDriver")
    actorActivity     LoadActivity[]     @relation("actorDriver")
    loadDocuments     LoadDocument[]
    loads             Load[]             @relation("driverLoads")
    devices           Device[]
    driverAssignments DriverAssignment[]

    @@index([name, carrierId])
}

model Invoice {
    id              String           @id @default(cuid())
    userId          String
    carrierId       String
    loadId          String           @unique
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    status          InvoiceStatus
    totalAmount     Decimal
    remainingAmount Decimal
    invoicedAt      DateTime
    dueDate         DateTime
    dueNetDays      Int              @default(0)
    paidAmount      Decimal?         @default(0)
    lastPaymentAt   DateTime?
    invoiceNum      Int
    carrier         Carrier          @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    load            Load             @relation(fields: [loadId], references: [id], onDelete: Cascade)
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    extraItems      InvoiceItem[]
    payments        InvoicePayment[]

    @@unique([carrierId, invoiceNum])
    @@index([userId, invoiceNum])
}

model InvoiceItem {
    id        String   @id @default(cuid())
    invoiceId String
    title     String
    amount    Decimal
    createdAt DateTime @default(now())
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoicePayment {
    id        String   @id @default(cuid())
    userId    String
    invoiceId String
    amount    Decimal
    paidAt    DateTime
    createdAt DateTime @default(now())
    carrierId String?
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadDocument {
    id               String         @id @default(cuid())
    userId           String?
    loadId           String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    fileKey          String
    fileUrl          String
    fileName         String
    fileType         String
    fileSize         Int
    loadIdForPodDoc  String?
    loadIdForRatecon String?        @unique
    driverId         String?
    carrierId        String?
    activity         LoadActivity[] @relation("actionDocument")
    driver           Driver?        @relation(fields: [driverId], references: [id])
    loadForPodDoc    Load?          @relation("loadForPodDoc", fields: [loadIdForPodDoc], references: [id], onDelete: Cascade)
    loadForRateCon   Load?          @relation("loadForRatecon", fields: [loadIdForRatecon], references: [id], onDelete: Cascade)
    load             Load?          @relation("load", fields: [loadId], references: [id], onDelete: Cascade)
    user             User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadActivity {
    id                     String             @id @default(cuid())
    createdAt              DateTime           @default(now())
    loadId                 String
    carrierId              String
    actorUserId            String?
    actorDriverId          String?
    actorDriverName        String?
    action                 LoadActivityAction
    fromStatus             LoadStatus?
    toStatus               LoadStatus?
    actionDocumentId       String?
    actionDocumentFileName String?
    actionDriverId         String?
    actionDriverName       String?
    longitude              Float?
    latitude               Float?
    actionDocument         LoadDocument?      @relation("actionDocument", fields: [actionDocumentId], references: [id])
    actionDriver           Driver?            @relation("actionDriver", fields: [actionDriverId], references: [id])
    actorDriver            Driver?            @relation("actorDriver", fields: [actorDriverId], references: [id])
    actorUser              User?              @relation("actorUser", fields: [actorUserId], references: [id], onDelete: Cascade)
    load                   Load               @relation(fields: [loadId], references: [id], onDelete: Cascade)
}

model Device {
    id        String   @id @default(cuid())
    fcmToken  String   @unique
    driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
    driverId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum LoadStopType {
    SHIPPER
    RECEIVER
    STOP
    LEGSTOP
}

enum LoadStatus {
    CREATED
    IN_PROGRESS
    DELIVERED
    POD_READY
}

enum InvoiceStatus {
    NOT_PAID
    PARTIALLY_PAID
    PAID
}

enum LoadActivityAction {
    CHANGE_STATUS
    UPLOAD_POD
    REMOVE_POD
    UPLOAD_DOCUMENT
    REMOVE_DOCUMENT
    ASSIGN_DRIVER
    UNASSIGN_DRIVER
}
