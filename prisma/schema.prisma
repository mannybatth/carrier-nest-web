datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["extendedIndexes", "fullTextSearch"]
}

model Account {
    id                Int     @id @default(autoincrement())
    type              String
    provider          String
    providerAccountId String
    refreshToken      String? @map("refresh_token")
    accessToken       String? @map("access_token")
    expiresAt         Int?    @map("expires_at")
    tokenType         String? @map("token_type")
    scope             String?
    idToken           String?
    sessionState      String? @map("session_state")
    oauthTokenSecret  String? @map("oauth_token_secret")
    oauthToken        String? @map("oauth_token")

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    carrier       Carrier?       @relation(fields: [carrierId], references: [id])
    carrierId     Int?
    isSiteAdmin   Boolean        @default(false)
    accounts      Account[]
    sessions      Session[]
    loads         Load[]
    invoices      Invoice[]
    loadDocuments LoadDocument[]
    loadStops     LoadStop[]

    @@index([name, email, carrierId])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Carrier {
    id           Int            @id @default(autoincrement())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    email        String         @unique
    name         String
    carrierId    String         @unique
    mcNumber     String?
    users        User[]
    loads        Load[]
    customers    Customer[]
    drivers      Driver[]
    LoadDocument LoadDocument[]

    @@index([name, email, carrierId])
}

model Load {
    id              Int            @id @default(autoincrement())
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          Int
    customer        Customer       @relation(fields: [customerId], references: [id])
    customerId      Int
    carrier         Carrier        @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    carrierId       Int
    driver          Driver?        @relation(fields: [driverId], references: [id])
    driverId        Int?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    refNum          String
    status          String
    statusUpdatedAt DateTime?
    shipper         LoadStop       @relation("shipper", fields: [shipperId], references: [id])
    shipperId       Int            @unique
    receiver        LoadStop       @relation("receiver", fields: [receiverId], references: [id])
    receiverId      Int            @unique
    stops           LoadStop[]
    rate            Decimal
    invoice         Invoice?
    distance        Int
    distanceUnit    String
    loadDocuments   LoadDocument[]

    @@index([refNum, carrierId, userId, customerId])
}

enum LoadStopType {
    SHIPPER
    RECEIVER
    STOP
}

model LoadStop {
    id              Int          @id @default(autoincrement())
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          Int
    type            LoadStopType
    name            String
    street          String
    city            String
    state           String
    zip             String
    country         String
    date            DateTime
    time            String
    loadsAsShipper  Load[]       @relation("shipper")
    loadsAsReceiver Load[]       @relation("receiver")
    loadAsStop      Load?        @relation(fields: [loadIdAsStop], references: [id])
    loadIdAsStop    Int?
}

model Customer {
    id                 Int      @id @default(autoincrement())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    contactEmail       String?
    billingEmail       String?
    paymentStatusEmail String?
    street             String?
    city               String?
    state              String?
    zip                String?
    country            String?
    carrier            Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    carrierId          Int
    loads              Load[]

    @@index([name, carrierId])
}

model Driver {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    email     String?
    phone     String?
    carrier   Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    carrierId Int
    loads     Load[]

    @@index([name, carrierId])
}

model Invoice {
    id          Int           @id @default(autoincrement())
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    load        Load          @relation(fields: [loadId], references: [id], onDelete: Cascade)
    loadId      Int           @unique
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    status      String
    totalAmount Decimal
    paidAmount  Decimal
    paidAt      DateTime?
    dueNetDays  Int           @default(0)
    extraItems  InvoiceItem[]

    @@index([userId])
}

model InvoiceItem {
    id        Int     @id @default(autoincrement())
    invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId Int
    title     String
    amount    Decimal
}

model LoadDocument {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    carrier   Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    carrierId Int
    load      Load     @relation(fields: [loadId], references: [id], onDelete: Cascade)
    loadId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    filename  String
}
