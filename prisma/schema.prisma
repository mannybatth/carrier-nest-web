generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
    binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL")
    shadowDatabaseUrl = env("POSTGRES_SHADOW_PRISMA_URL")
    extensions        = [pg_trgm]
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?
    ext_expires_in     Int?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String                   @id @default(cuid())
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    name                    String?
    email                   String?                  @unique
    emailVerified           DateTime?
    image                   String?
    isSiteAdmin             Boolean                  @default(false)
    defaultCarrierId        String?                  @map("default_carrier_id")
    role                    String                   @default("dispatcher")
    accounts                Account[]
    createdInvoices         DriverInvoice[]          @relation("UserCreatedInvoices")
    invoices                Invoice[]
    InvoicePayment          InvoicePayment[]
    loads                   Load[]
    loadActivity            LoadActivity[]           @relation("actorUser")
    loadDocuments           LoadDocument[]
    stops                   LoadStop[]
    notifications           Notification[]
    notificationPreferences NotificationPreference[]
    sessions                Session[]
    defaultCarrier          Carrier?                 @relation("defaultCarrier", fields: [defaultCarrierId], references: [id])
    carriers                Carrier[]                @relation("CarrierToUser")

    @@index([name, email, defaultCarrierId])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AccountDeletionCode {
    id        String   @id @default(cuid())
    carrierId String   @unique
    code      String
    expires   DateTime
    createdAt DateTime @default(now())
    carrier   Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
}

model TeamInvitation {
    id            String    @id @default(cuid())
    email         String
    token         String    @unique
    carrierId     String
    carrierName   String?
    inviterName   String?
    inviterEmail  String?
    role          String?
    expires       DateTime
    createdAt     DateTime  @default(now())
    usedAt        DateTime?
    used          Boolean   @default(false)
    emailCount    Int       @default(1)
    emailSentAt   DateTime?
    lastEmailSent DateTime  @default(now())
    carrier       Carrier   @relation(fields: [carrierId], references: [id], onDelete: Cascade)

    @@index([email, carrierId])
    @@index([expires])
    @@index([lastEmailSent])
}

model Carrier {
    id                      String                   @id @default(cuid())
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    email                   String                   @unique
    name                    String
    dotNum                  String?
    mcNum                   String?
    street                  String
    city                    String
    state                   String
    zip                     String
    country                 String
    phone                   String?
    carrierCode             String                   @unique
    lastImportReset         DateTime                 @default(now())
    rateconImportsCount     Int                      @default(0)
    accountDeletionCodes    AccountDeletionCode?
    customers               Customer[]
    drivers                 Driver[]
    driverInvoices          DriverInvoice[]
    driverInvoiceLineItems  DriverInvoiceLineItem[]
    equipments              Equipment[]
    invoices                Invoice[]
    lineItemCharges         LineItemCharge[]
    loads                   Load[]
    locations               Location[]
    notifications           Notification[]
    notificationPreferences NotificationPreference[]
    subscription            Subscription?
    teamInvitations         TeamInvitation[]
    defaultCarrierUsers     User[]                   @relation("defaultCarrier")
    users                   User[]                   @relation("CarrierToUser")

    @@index([name, email, carrierCode])
}

model Subscription {
    id                   String           @id @default(cuid())
    stripeCustomerId     String?
    stripeSubscriptionId String?
    plan                 SubscriptionPlan @default(BASIC)
    status               String
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt
    carrierId            String?          @unique
    numberOfDrivers      Int              @default(1)
    carrier              Carrier?         @relation(fields: [carrierId], references: [id], onDelete: Cascade)
}

model Load {
    id                 String              @id @default(cuid())
    userId             String
    customerId         String?
    carrierId          String
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    refNum             String
    shipperId          String
    receiverId         String
    rate               Decimal
    routeEncoded       String?
    status             LoadStatus          @default(CREATED)
    routeDistanceMiles Decimal?
    routeDurationHours Decimal?
    loadNum            String
    assignmentPayments AssignmentPayment[]
    driverAssignments  DriverAssignment[]
    invoice            Invoice?
    carrier            Carrier             @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    customer           Customer?           @relation(fields: [customerId], references: [id])
    receiver           LoadStop            @relation("receiver", fields: [receiverId], references: [id])
    shipper            LoadStop            @relation("shipper", fields: [shipperId], references: [id])
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    activity           LoadActivity[]
    bolDocuments       LoadDocument[]      @relation("loadForBolDoc")
    podDocuments       LoadDocument[]      @relation("loadForPodDoc")
    rateconDocument    LoadDocument?       @relation("loadForRatecon")
    loadDocuments      LoadDocument[]      @relation("load")
    stops              LoadStop[]
    notifications      Notification[]
    route              Route?

    @@unique([carrierId, refNum])
    @@index([refNum, carrierId, userId, customerId])
}

model LoadStop {
    id                String             @id @default(cuid())
    userId            String
    type              LoadStopType
    name              String
    street            String
    city              String
    state             String
    zip               String
    country           String
    date              DateTime
    time              String
    loadIdAsStop      String?
    stopIndex         Int                @default(0)
    createdAt         DateTime           @default(now())
    latitude          Float?
    longitude         Float?
    pickUpNumbers     String?
    poNumbers         String?
    referenceNumbers  String?
    loadsAsReceiver   Load[]             @relation("receiver")
    loadsAsShipper    Load[]             @relation("shipper")
    loadAsStop        Load?              @relation(fields: [loadIdAsStop], references: [id])
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    routeLegLocations RouteLegLocation[]
}

model Route {
    id        String     @id @default(cuid())
    loadId    String     @unique
    load      Load       @relation(fields: [loadId], references: [id], onDelete: Cascade)
    routeLegs RouteLeg[]
}

model RouteLeg {
    id                 String             @id @default(cuid())
    scheduledDate      DateTime?
    scheduledTime      String?
    startLatitude      Float?
    startLongitude     Float?
    startedAt          DateTime?
    endLatitude        Float?
    endLongitude       Float?
    endedAt            DateTime?
    createdAt          DateTime           @default(now())
    driverInstructions String?
    status             RouteLegStatus     @default(ASSIGNED)
    routeId            String
    updatedAt          DateTime           @default(now()) @updatedAt
    distanceMiles      Decimal?
    durationHours      Decimal?
    driverAssignments  DriverAssignment[]
    route              Route              @relation(fields: [routeId], references: [id], onDelete: Cascade)
    locations          RouteLegLocation[]
}

model RouteLegLocation {
    id         String    @id @default(cuid())
    loadStopId String?
    locationId String?
    routeLegId String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    loadStop   LoadStop? @relation(fields: [loadStopId], references: [id], onDelete: Cascade)
    location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
    routeLeg   RouteLeg  @relation(fields: [routeLegId], references: [id], onDelete: Cascade)
}

model Location {
    id                String             @id @default(cuid())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    name              String
    street            String
    city              String
    state             String
    zip               String
    country           String
    latitude          Float?
    longitude         Float?
    carrierId         String
    carrier           Carrier            @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    routeLegLocations RouteLegLocation[]
}

model Customer {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    contactEmail       String?
    billingEmail       String?
    paymentStatusEmail String?
    street             String?
    city               String?
    state              String?
    zip                String?
    country            String?
    carrierId          String
    carrier            Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads              Load[]

    @@index([name, carrierId])
}

model Equipment {
    id              String          @id @default(cuid())
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    type            String?
    carrierId       String
    equipmentNumber String?
    licensePlate    String?
    make            String
    model           String?
    status          EquipmentStatus
    vin             String?
    year            Int?
    carrier         Carrier         @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    drivers         Driver[]        @relation("DriverToEquipment")
}

model Invoice {
    id              String           @id @default(cuid())
    userId          String
    carrierId       String
    loadId          String           @unique
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    status          InvoiceStatus
    totalAmount     Decimal
    remainingAmount Decimal
    invoicedAt      DateTime
    dueDate         DateTime
    dueNetDays      Int              @default(0)
    paidAmount      Decimal?         @default(0)
    lastPaymentAt   DateTime?
    invoiceNum      Int
    carrier         Carrier          @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    load            Load             @relation(fields: [loadId], references: [id], onDelete: Cascade)
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    extraItems      InvoiceItem[]
    payments        InvoicePayment[]

    @@unique([carrierId, invoiceNum])
    @@index([userId, invoiceNum])
}

model InvoiceItem {
    id        String   @id @default(cuid())
    invoiceId String
    title     String
    amount    Decimal
    createdAt DateTime @default(now())
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoicePayment {
    id        String   @id @default(cuid())
    userId    String
    invoiceId String
    amount    Decimal
    paidAt    DateTime
    createdAt DateTime @default(now())
    carrierId String?
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadDocument {
    id               String         @id @default(cuid())
    userId           String?
    loadId           String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    fileKey          String
    fileUrl          String
    fileName         String
    fileType         String
    fileSize         BigInt
    loadIdForPodDoc  String?
    loadIdForRatecon String?        @unique
    driverId         String?
    carrierId        String?
    loadIdForBolDoc  String?
    activity         LoadActivity[] @relation("actionDocument")
    driver           Driver?        @relation(fields: [driverId], references: [id])
    loadForBolDoc    Load?          @relation("loadForBolDoc", fields: [loadIdForBolDoc], references: [id], onDelete: Cascade)
    loadForPodDoc    Load?          @relation("loadForPodDoc", fields: [loadIdForPodDoc], references: [id], onDelete: Cascade)
    loadForRateCon   Load?          @relation("loadForRatecon", fields: [loadIdForRatecon], references: [id], onDelete: Cascade)
    load             Load?          @relation("load", fields: [loadId], references: [id], onDelete: Cascade)
    user             User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadActivity {
    id                     String             @id @default(cuid())
    createdAt              DateTime           @default(now())
    loadId                 String
    carrierId              String
    actorUserId            String?
    actorDriverId          String?
    actorDriverName        String?
    action                 LoadActivityAction
    fromStatus             LoadStatus?
    toStatus               LoadStatus?
    fromLegStatus          RouteLegStatus?
    toLegStatus            RouteLegStatus?
    actionDocumentId       String?
    actionDocumentFileName String?
    actionDriverId         String?
    actionDriverName       String?
    longitude              Float?
    latitude               Float?
    actionDocument         LoadDocument?      @relation("actionDocument", fields: [actionDocumentId], references: [id])
    actionDriver           Driver?            @relation("actionDriver", fields: [actionDriverId], references: [id])
    actorDriver            Driver?            @relation("actorDriver", fields: [actorDriverId], references: [id])
    actorUser              User?              @relation("actorUser", fields: [actorUserId], references: [id], onDelete: Cascade)
    load                   Load               @relation(fields: [loadId], references: [id], onDelete: Cascade)
}

model Device {
    id        String   @id @default(cuid())
    fcmToken  String   @unique
    driverId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model Driver {
    id                String                  @id @default(cuid())
    createdAt         DateTime                @default(now())
    updatedAt         DateTime                @updatedAt
    name              String
    email             String?
    phone             String
    active            Boolean                 @default(true)
    type              DriverType              @default(DRIVER)
    carrierId         String
    smsCode           String?
    smsCodeExpiry     DateTime?
    defaultFixedPay   Decimal?
    perMileRate       Decimal?
    takeHomePercent   Decimal?
    defaultChargeType ChargeType?
    perHourRate       Decimal?
    devices           Device[]
    carrier           Carrier                 @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    assignments       DriverAssignment[]
    driverInvoices    DriverInvoice[]         @relation("DriverInvoices")
    invoiceLineItems  DriverInvoiceLineItem[]
    payments          DriverPayment[]
    actionActivity    LoadActivity[]          @relation("actionDriver")
    actorActivity     LoadActivity[]          @relation("actorDriver")
    loadDocuments     LoadDocument[]
    equipments        Equipment[]             @relation("DriverToEquipment")

    @@index([name, carrierId])
}

model DriverPayment {
    id                 String              @id @default(cuid())
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @default(now()) @updatedAt
    carrierId          String
    amount             Decimal
    paymentDate        DateTime
    driverId           String
    isBatchPayment     Boolean             @default(false)
    notes              String?
    assignmentPayments AssignmentPayment[]
    driver             Driver              @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model AssignmentPayment {
    id                 String            @id @default(cuid())
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @default(now()) @updatedAt
    carrierId          String
    loadId             String?
    driverAssignmentId String?
    driverPaymentId    String?
    driverAssignment   DriverAssignment? @relation(fields: [driverAssignmentId], references: [id])
    driverPayment      DriverPayment?    @relation(fields: [driverPaymentId], references: [id], onDelete: Cascade)
    load               Load?             @relation(fields: [loadId], references: [id])
}

model DriverAssignment {
    id                  String              @id @default(cuid())
    loadId              String?
    driverId            String
    routeLegId          String
    assignedAt          DateTime            @default(now())
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @default(now()) @updatedAt
    carrierId           String
    chargeType          ChargeType
    chargeValue         Decimal
    billedLoadRate      Decimal?
    billedDistanceMiles Decimal?
    billedDurationHours Decimal?
    invoiceId           String?
    emptyMiles          Decimal?
    assignmentPayments  AssignmentPayment[]
    driver              Driver              @relation(fields: [driverId], references: [id], onDelete: Cascade)
    invoice             DriverInvoice?      @relation("InvoiceAssignments", fields: [invoiceId], references: [id])
    load                Load?               @relation(fields: [loadId], references: [id], onDelete: Cascade)
    routeLeg            RouteLeg            @relation(fields: [routeLegId], references: [id], onDelete: Cascade)

    @@unique([driverId, routeLegId])
}

model DriverInvoicePayment {
    id          String        @id @default(cuid())
    invoiceId   String
    amount      Float
    paymentDate DateTime
    notes       String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    invoice     DriverInvoice @relation(fields: [invoiceId], references: [id])
}

model DriverInvoice {
    id          String                  @id @default(cuid())
    invoiceNum  Int
    carrierId   String
    driverId    String
    createdById String
    createdAt   DateTime                @default(now())
    updatedAt   DateTime                @updatedAt
    notes       String?
    fromDate    DateTime
    toDate      DateTime
    totalAmount Decimal
    status      DriverInvoiceStatus     @default(PENDING)
    assignments DriverAssignment[]      @relation("InvoiceAssignments")
    carrier     Carrier                 @relation(fields: [carrierId], references: [id])
    createdBy   User                    @relation("UserCreatedInvoices", fields: [createdById], references: [id])
    driver      Driver                  @relation("DriverInvoices", fields: [driverId], references: [id])
    lineItems   DriverInvoiceLineItem[]
    payments    DriverInvoicePayment[]

    @@unique([carrierId, invoiceNum])
}

model DriverInvoiceLineItem {
    id          String          @id @default(cuid())
    invoiceId   String
    driverId    String
    carrierId   String
    chargeId    String?
    description String
    amount      Decimal
    createdAt   DateTime        @default(now())
    carrier     Carrier         @relation(fields: [carrierId], references: [id])
    charge      LineItemCharge? @relation(fields: [chargeId], references: [id])
    driver      Driver          @relation(fields: [driverId], references: [id])
    invoice     DriverInvoice   @relation(fields: [invoiceId], references: [id])
}

model LineItemCharge {
    id               String                  @id @default(cuid())
    carrierId        String
    name             String
    defaultAmount    Decimal?
    createdAt        DateTime                @default(now())
    invoiceLineItems DriverInvoiceLineItem[]
    carrier          Carrier                 @relation(fields: [carrierId], references: [id])

    @@unique([carrierId, name])
}

model Notification {
    id           String                 @id @default(cuid())
    type         NotificationType
    priority     NotificationPriority   @default(MEDIUM)
    title        String
    message      String
    data         Json?
    carrierId    String
    userId       String?
    driverId     String?
    loadId       String?
    assignmentId String?
    routeLegId   String?
    createdAt    DateTime               @default(now())
    updatedAt    DateTime               @updatedAt
    expiresAt    DateTime?
    isRead       Boolean                @default(false)
    readAt       DateTime?
    carrier      Carrier                @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    load         Load?                  @relation(fields: [loadId], references: [id])
    user         User?                  @relation(fields: [userId], references: [id])
    deliveries   NotificationDelivery[]

    // Performance indexes for notification system
    @@index([carrierId, createdAt(sort: Desc)])
    @@index([userId, isRead])
    @@index([type, carrierId])
    @@index([type, assignmentId, userId, createdAt(sort: Desc)], name: "notification_deduplication_idx")
    @@index([type, carrierId, createdAt(sort: Desc)], name: "notification_type_carrier_idx")
    @@index([userId, isRead, createdAt(sort: Desc)], name: "notification_user_read_idx")
}

model NotificationPreference {
    id           String           @id @default(cuid())
    userId       String
    carrierId    String
    type         NotificationType
    enabled      Boolean          @default(true)
    emailEnabled Boolean          @default(true)
    smsEnabled   Boolean          @default(false)
    pushEnabled  Boolean          @default(true)
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    carrier      Carrier          @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, carrierId, type])
    @@index([userId, carrierId])
}

model NotificationDelivery {
    id             String       @id @default(cuid())
    notificationId String
    channel        String
    status         String
    sentAt         DateTime?
    deliveredAt    DateTime?
    error          String?
    createdAt      DateTime     @default(now())
    notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

enum SubscriptionPlan {
    BASIC
    PRO
}

enum EquipmentStatus {
    AVAILABLE
    MAINTENANCE
    INACTIVE
}

enum LoadStopType {
    SHIPPER
    RECEIVER
    STOP
}

enum LoadStatus {
    CREATED
    IN_PROGRESS
    DELIVERED
    POD_READY
}

enum RouteLegStatus {
    ASSIGNED
    IN_PROGRESS
    COMPLETED
}

enum InvoiceStatus {
    NOT_PAID
    PARTIALLY_PAID
    PAID
}

enum LoadActivityAction {
    CHANGE_STATUS
    UPLOAD_POD
    REMOVE_POD
    UPLOAD_DOCUMENT
    REMOVE_DOCUMENT
    ADD_DRIVER_TO_ASSIGNMENT
    REMOVE_DRIVER_FROM_ASSIGNMENT
    CHANGE_ASSIGNMENT_STATUS
    REMOVE_ASSIGNMENT
    ADD_ASSIGNMENT
    UPDATE_ASSIGNMENT
    UPLOAD_BOL
    REMOVE_BOL
    UPLOAD_RATECON
    REMOVE_RATECON
}

enum ChargeType {
    PER_MILE
    FIXED_PAY
    PERCENTAGE_OF_LOAD
    PER_HOUR
}

enum DriverInvoiceStatus {
    PENDING
    APPROVED
    PARTIALLY_PAID
    PAID
}

enum NotificationType {
    ASSIGNMENT_STARTED
    ASSIGNMENT_COMPLETED
    DOCUMENT_UPLOADED
    DOCUMENT_DELETED
    INVOICE_APPROVED
    ASSIGNMENT_UPDATED
    LOCATION_UPDATE
    STATUS_CHANGE
    INVOICE_SUBMITTED
    PAYMENT_STATUS_CHANGE
    INVOICE_DISPUTED
    INVOICE_ATTENTION_REQUIRED
    PAYMENT_PROCESSED
    DEADLINE_APPROACHING
    INVOICE_OVERDUE
}

enum NotificationPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum DriverType {
    DRIVER
    OWNER_OPERATOR
}
