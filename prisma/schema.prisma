generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Account {
    id                Int     @id @default(autoincrement())
    type              String
    provider          String
    providerAccountId String
    refreshToken      String? @map("refresh_token")
    accessToken       String? @map("access_token")
    expiresAt         Int?    @map("expires_at")
    tokenType         String? @map("token_type")
    scope             String?
    idToken           String?
    sessionState      String? @map("session_state")
    oauthTokenSecret  String? @map("oauth_token_secret")
    oauthToken        String? @map("oauth_token")
    userId            Int
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             Int              @id @default(autoincrement())
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    carrierId      Int?
    isSiteAdmin    Boolean          @default(false)
    accounts       Account[]
    invoices       Invoice[]
    InvoicePayment InvoicePayment[]
    loads          Load[]
    loadDocuments  LoadDocument[]
    stops          LoadStop[]
    sessions       Session[]
    carrier        Carrier?         @relation(fields: [carrierId], references: [id])

    @@index([name, email, carrierId])
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Carrier {
    id        Int        @id @default(autoincrement())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    email     String     @unique
    name      String
    dotNum    String?
    mcNum     String?
    street    String
    city      String
    state     String
    zip       String
    country   String
    phone     String?
    customers Customer[]
    drivers   Driver[]
    invoices  Invoice[]
    loads     Load[]
    users     User[]

    @@index([name, email])
}

model Load {
    id            Int            @id @default(autoincrement())
    userId        Int
    customerId    Int?
    carrierId     Int
    driverId      Int?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    refNum        String
    shipperId     Int
    receiverId    Int
    rate          Decimal
    distance      Int
    invoice       Invoice?
    carrier       Carrier        @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    customer      Customer?      @relation(fields: [customerId], references: [id])
    driver        Driver?        @relation(fields: [driverId], references: [id])
    receiver      LoadStop       @relation("receiver", fields: [receiverId], references: [id])
    shipper       LoadStop       @relation("shipper", fields: [shipperId], references: [id])
    user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    loadDocuments LoadDocument[]
    stops         LoadStop[]

    @@index([refNum, carrierId, userId, customerId])
}

model LoadStop {
    id              Int          @id @default(autoincrement())
    userId          Int
    type            LoadStopType
    name            String
    street          String
    city            String
    state           String
    zip             String
    country         String
    date            DateTime
    time            String
    longitude       Float?
    latitude        Float?
    loadIdAsStop    Int?
    stopIndex       Int          @default(0)
    loadsAsReceiver Load[]       @relation("receiver")
    loadsAsShipper  Load[]       @relation("shipper")
    loadAsStop      Load?        @relation(fields: [loadIdAsStop], references: [id])
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
    id                 Int      @id @default(autoincrement())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    name               String
    contactEmail       String?
    billingEmail       String?
    paymentStatusEmail String?
    street             String?
    city               String?
    state              String?
    zip                String?
    country            String?
    carrierId          Int
    carrier            Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads              Load[]

    @@index([name, carrierId])
}

model Driver {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    email     String?
    phone     String?
    carrierId Int
    carrier   Carrier  @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    loads     Load[]

    @@index([name, carrierId])
}

model Invoice {
    id              Int              @id @default(autoincrement())
    userId          Int
    carrierId       Int
    loadId          Int              @unique
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    status          InvoiceStatus
    totalAmount     Decimal
    remainingAmount Decimal
    invoicedAt      DateTime
    dueDate         DateTime
    dueNetDays      Int              @default(0)
    paidAmount      Decimal?         @default(0)
    lastPaymentAt   DateTime?
    carrier         Carrier          @relation(fields: [carrierId], references: [id], onDelete: Cascade)
    load            Load             @relation(fields: [loadId], references: [id], onDelete: Cascade)
    user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    extraItems      InvoiceItem[]
    payments        InvoicePayment[]

    @@index([userId])
}

model InvoiceItem {
    id        Int     @id @default(autoincrement())
    invoiceId Int
    title     String
    amount    Decimal
    invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoicePayment {
    id        Int      @id @default(autoincrement())
    userId    Int
    invoiceId Int
    amount    Decimal
    paidAt    DateTime
    invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoadDocument {
    id        Int      @id @default(autoincrement())
    userId    Int
    loadId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    fileKey   String
    fileUrl   String
    fileName  String
    fileType  String
    fileSize  Int
    load      Load     @relation(fields: [loadId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LoadStopType {
    SHIPPER
    RECEIVER
    STOP
}

enum InvoiceStatus {
    NOT_PAID
    PARTIALLY_PAID
    PAID
}
